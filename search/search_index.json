{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Seliware API Documentation","text":"<p>Welcome to the Seliware Executor API documentation! Here, you'll find everything you need to integrate and make use of Seliware's unique features.</p> <p></p> <p>If you haven't already, be sure to check out how to create a custom UI for Seliware Executor by upio, as well as his awesome modules for Console and other exciting features.</p>"},{"location":"categories/clipboard_management/","title":"Clipboard Management","text":"<p>This section covers all functions related to clipboard management in the API.</p>"},{"location":"categories/clipboard_management/#clipboard-functions","title":"Clipboard Functions","text":""},{"location":"categories/clipboard_management/#setclipboard","title":"setclipboard","text":"<p>Copies a string, Instance, or table of Instances to the clipboard. Returns true on success.</p> <p>Description: <code>setclipboard</code> allows you to programmatically copy data to the system's clipboard. This can be a string, an individual Roblox Instance, or even a table of Instances.</p> <p>Arguments: - <code>input</code> (string | Instance | table): The data to be copied to the clipboard.</p> <p>Returns: - (bool): Returns true if the data was successfully copied to the clipboard, false otherwise.</p>"},{"location":"categories/clipboard_management/#toclipboard","title":"toclipboard","text":"<p>Copies a string to the clipboard. Similar to setclipboard, but specialized for strings.</p> <p>Description: <code>toclipboard</code> is a simpler function that specifically handles copying strings to the clipboard.</p> <p>Arguments: - <code>input</code> (string): The string to be copied to the clipboard.</p> <p>Returns: - (bool): Returns true if the string was successfully copied to the clipboard, false otherwise.</p>"},{"location":"categories/clipboard_management/#setrbxclipboard","title":"setrbxclipboard","text":"<p>Copies a string or Instance to Roblox's clipboard, allowing interaction between the system and Roblox assets.</p> <p>Description: <code>setrbxclipboard</code> allows copying either a string or an Instance to Roblox's clipboard.</p> <p>Arguments: - <code>input</code> (string | Instance): The string or Instance to be copied to Roblox's clipboard.</p> <p>Returns: - (bool): Returns true if the data was successfully copied to Roblox's clipboard, false otherwise.</p>"},{"location":"categories/clipboard_management/#write_clipboard","title":"write_clipboard","text":"<p>Writes a string to the clipboard.</p> <p>Description: <code>write_clipboard</code> is used to directly write a string into the clipboard for later retrieval.</p> <p>Arguments: - <code>input</code> (string): The string to be written to the clipboard.</p> <p>Returns: - (bool): Returns true if the string was successfully written to the clipboard, false otherwise.</p>"},{"location":"categories/debugging_profiling/","title":"Debugging and Profiling","text":"<p>This section covers all functions related to debugging and profiling.</p>"},{"location":"categories/debugging_profiling/#debugging-and-profiling-functions","title":"Debugging and Profiling Functions","text":""},{"location":"categories/debugging_profiling/#debug","title":"debug","text":"<p>Accesses Lua's debug library.</p> <p>Description: <code>debug</code> is used to access and manipulate the Lua debug library, providing inspection and control of the execution environment.</p> <p>Returns: - (table): The Lua debug library.</p>"},{"location":"categories/debugging_profiling/#getinfo","title":"getinfo","text":"<p>Returns information about a function or thread.</p> <p>Description: <code>getinfo</code> retrieves information about the stack, allowing for introspection of functions or threads.</p> <p>Arguments: - <code>func</code> (function): The function or thread to retrieve information about.</p> <p>Returns: - (table): Information about the function or thread.</p>"},{"location":"categories/debugging_profiling/#decompile","title":"decompile","text":"<p>Decompiles <code>target</code> asynchronously.</p> <p>Description: <code>decompile</code> generates a human-readable version of the given compiled Lua function.</p> <p>Arguments: - <code>target</code> (function): The function to decompile.</p> <p>Returns: - (string): The decompiled version of the function.</p>"},{"location":"categories/debugging_profiling/#disassemble","title":"disassemble","text":"<p>Disassembles Lua bytecode.</p> <p>Description: <code>disassemble</code> converts Lua bytecode into a human-readable instruction set.</p> <p>Arguments: - <code>bytecode</code> (string): The bytecode to disassemble.</p> <p>Returns: - (string): The disassembled bytecode.</p>"},{"location":"categories/debugging_profiling/#getstack","title":"getstack","text":"<p>Returns a traceback of the call stack.</p> <p>Description: <code>getstack</code> provides a snapshot of the current call stack for debugging purposes.</p> <p>Returns: - (string): Traceback of the call stack.</p>"},{"location":"categories/debugging_profiling/#getprotos","title":"getprotos","text":"<p>Returns a table of prototypes in a Lua function.</p> <p>Description: <code>getprotos</code> allows for the inspection of function prototypes, aiding in understanding the structure of Lua functions.</p> <p>Arguments: - <code>func</code> (function): The function whose prototypes are to be retrieved.</p> <p>Returns: - (table): The prototypes within the function.</p>"},{"location":"categories/debugging_profiling/#getproto","title":"getproto","text":"<p>Returns the prototype at a specific index in a function.</p> <p>Description: <code>getproto</code> extracts a specific prototype from a Lua function, enabling low-level function analysis.</p> <p>Arguments: - <code>func</code> (function): The function to analyze. - <code>index</code> (number): The index of the prototype to retrieve.</p> <p>Returns: - (function): The prototype at the specified index.</p>"},{"location":"categories/environment_management/","title":"Environment and Script Management","text":"<p>This section covers all functions related to environment and script management.</p>"},{"location":"categories/environment_management/#environment-functions","title":"Environment Functions","text":""},{"location":"categories/environment_management/#getgenv","title":"getgenv","text":"<p>Returns Seliware's global environment table.</p> <p>Description: <code>getgenv</code> allows you to access and modify the global environment table.</p> <p>Returns: - (table): The global environment table.</p>"},{"location":"categories/environment_management/#getrenv","title":"getrenv","text":"<p>Returns the game's global environment table.</p> <p>Description: <code>getrenv</code> provides access to the game's global environment, allowing inspection and modifications that affect game-specific variables and settings.</p> <p>Returns: - (table): The game's global environment table.</p>"},{"location":"categories/environment_management/#getnilinstances","title":"getnilinstances","text":"<p>Returns a list of all nil-parented instances referenced by Lua.</p> <p>Description: <code>getnilinstances</code> retrieves instances that are no longer parented, but are still referenced, which can help with tracking hidden or unexpected game objects.</p> <p>Returns: - (table): A list of nil-parented instances.</p>"},{"location":"categories/environment_management/#getloadedmodules","title":"getloadedmodules","text":"<p>Returns a list of all loaded <code>ModuleScript</code>s.</p> <p>Description: <code>getloadedmodules</code> lists all <code>ModuleScript</code> instances that have been loaded into the environment.</p> <p>Returns: - (table): A list of loaded <code>ModuleScript</code> instances.</p>"},{"location":"categories/environment_management/#getscripts","title":"getscripts","text":"<p>Returns a list of all loaded scripts.</p> <p>Description: <code>getscripts</code> provides a list of all currently loaded Lua scripts, useful for understanding what scripts are active.</p> <p>Returns: - (table): A list of loaded Lua scripts.</p>"},{"location":"categories/environment_management/#getinstances","title":"getinstances","text":"<p>Returns a list of all instances referenced by Lua.</p> <p>Description: <code>getinstances</code> allows access to all instances currently referenced in the Lua environment, including objects that may not be present in the DataModel.</p> <p>Returns: - (table): A list of referenced instances.</p>"},{"location":"categories/environment_management/#getsenv","title":"getsenv","text":"<p>Returns the Lua environment associated with the main function of <code>script</code>.</p> <p>Description: <code>getsenv</code> is used to get the environment of a specific script, allowing access to its local variables and functions.</p> <p>Arguments: - <code>script</code> (Script): The script whose environment is to be accessed.</p> <p>Returns: - (table): The environment table associated with the script.</p>"},{"location":"categories/environment_management/#script-functions","title":"Script Functions","text":""},{"location":"categories/environment_management/#getscriptfunction","title":"getscriptfunction","text":"<p>Returns the main function associated with <code>script</code>.</p> <p>Description: <code>getscriptfunction</code> retrieves the main function from a given script, allowing you to examine its behavior and logic.</p> <p>Arguments: - <code>script</code> (Script): The script to retrieve the function from.</p> <p>Returns: - (function): The main function of the script.</p>"},{"location":"categories/environment_management/#getscriptclosure","title":"getscriptclosure","text":"<p>Returns the closure of a script.</p> <p>Description: <code>getscriptclosure</code> provides the closure (function environment) of a specific script, enabling deeper access to its internal logic.</p> <p>Arguments: - <code>script</code> (Script): The script to retrieve the closure from.</p> <p>Returns: - (function): The closure of the script.</p>"},{"location":"categories/environment_management/#getscriptbytecode","title":"getscriptbytecode","text":"<p>Returns the bytecode of a script.</p> <p>Description: <code>getscriptbytecode</code> retrieves the raw bytecode of a given Lua script, which can be useful for analyzing or modifying the script at a low level.</p> <p>Arguments: - <code>script</code> (Script): The script to retrieve the bytecode from.</p> <p>Returns: - (string): The bytecode of the script.</p>"},{"location":"categories/environment_management/#require","title":"require","text":"<p>Allows for requiring game modules from higher contexts of script execution.</p> <p>Description: <code>require</code> is used to load a module script within a higher execution context, enabling the use of functions and variables defined within the module.</p> <p>Arguments: - <code>module</code> (ModuleScript): The module script to require.</p> <p>Returns: - (varies): The result of the module script's execution.</p>"},{"location":"categories/environment_management/#loadstring","title":"loadstring","text":"<p>Equivalent to Lua 5.1's <code>loadstring</code>.</p> <p>Description: <code>loadstring</code> dynamically compiles a string into a Lua function. This is useful for executing arbitrary code at runtime.</p> <p>Arguments: - <code>code</code> (string): The Lua code to compile and execute.</p> <p>Returns: - (function): The compiled function, or an error message if compilation fails.</p>"},{"location":"categories/file_management/","title":"File and Folder Management","text":"<p>This section covers all functions related to file and folder operations.</p>"},{"location":"categories/file_management/#file-and-folder-operations","title":"File and Folder Operations","text":""},{"location":"categories/file_management/#makefolder","title":"makefolder","text":"<p>Recursively creates directories. Returns true on success.</p> <p>Description: <code>makefolder</code> creates a folder at the specified path, including any necessary parent directories that do not already exist.</p> <p>Arguments: - <code>path</code> (string): The path where the folder should be created.</p> <p>Returns: - (bool): Returns true if the folder was successfully created, false otherwise.</p>"},{"location":"categories/file_management/#delfile","title":"delfile","text":"<p>Deletes a file.</p> <p>Description: <code>delfile</code> removes the specified file from the file system.</p> <p>Arguments: - <code>path</code> (string): The path to the file to be deleted.</p> <p>Returns: - (bool): Returns true if the file was successfully deleted, false otherwise.</p>"},{"location":"categories/file_management/#delfolder","title":"delfolder","text":"<p>Deletes a folder.</p> <p>Description: <code>delfolder</code> removes the specified folder and all its contents from the file system.</p> <p>Arguments: - <code>path</code> (string): The path to the folder to be deleted.</p> <p>Returns: - (bool): Returns true if the folder was successfully deleted, false otherwise.</p>"},{"location":"categories/file_management/#readfile","title":"readfile","text":"<p>Reads a file from the workspace folder.</p> <p>Description: <code>readfile</code> opens the specified file and returns its contents as a string.</p> <p>Arguments: - <code>path</code> (string): The path to the file to be read.</p> <p>Returns: - (string): The contents of the file, or an error message if the file could not be read.</p>"},{"location":"categories/file_management/#writefile","title":"writefile","text":"<p>Writes to a file in the workspace folder.</p> <p>Description: <code>writefile</code> creates or overwrites a file at the specified path with the provided content.</p> <p>Arguments: - <code>path</code> (string): The path where the file should be written. - <code>content</code> (string): The content to be written to the file.</p> <p>Returns: - (bool): Returns true if the file was successfully written, false otherwise.</p>"},{"location":"categories/file_management/#appendfile","title":"appendfile","text":"<p>Appends to a file in the workspace folder.</p> <p>Description: <code>appendfile</code> adds content to the end of an existing file without overwriting its current contents.</p> <p>Arguments: - <code>path</code> (string): The path to the file to append to. - <code>content</code> (string): The content to append to the file.</p> <p>Returns: - (bool): Returns true if the content was successfully appended, false otherwise.</p>"},{"location":"categories/file_management/#listfiles","title":"listfiles","text":"<p>Returns an array of file names belonging to a folder.</p> <p>Description: <code>listfiles</code> retrieves the names of all files contained in the specified directory.</p> <p>Arguments: - <code>path</code> (string): The path of the directory to list.</p> <p>Returns: - (table): A list of file names within the specified directory.</p>"},{"location":"categories/file_management/#isfile","title":"isfile","text":"<p>Returns true if the path refers to a file.</p> <p>Description: <code>isfile</code> checks if the given path points to a file.</p> <p>Arguments: - <code>path</code> (string): The path to be checked.</p> <p>Returns: - (bool): Returns true if the path refers to a file, false otherwise.</p>"},{"location":"categories/file_management/#isfolder","title":"isfolder","text":"<p>Returns true if the path refers to a folder.</p> <p>Description: <code>isfolder</code> checks if the given path points to a folder.</p> <p>Arguments: - <code>path</code> (string): The path to be checked.</p> <p>Returns: - (bool): Returns true if the path refers to a folder, false otherwise.</p>"},{"location":"categories/file_management/#loadfile","title":"loadfile","text":"<p>Equivalent to <code>loadstring(readfile(path))</code>.</p> <p>Description: <code>loadfile</code> reads the contents of a file and compiles it as a Lua function, similar to how <code>loadstring</code> works.</p> <p>Arguments: - <code>path</code> (string): The path to the file to be loaded.</p> <p>Returns: - (function): The compiled function from the file's contents, or an error message if compilation fails.</p>"},{"location":"categories/http_websocket_requests/","title":"HTTP and WebSocket Requests","text":"<p>This section covers all functions related to HTTP requests and WebSocket management.</p>"},{"location":"categories/http_websocket_requests/#http-and-websocket-functions","title":"HTTP and WebSocket Functions","text":""},{"location":"categories/http_websocket_requests/#request","title":"request","text":"<p>Makes a HTTP request.</p> <p>Description: <code>request</code> is used to make HTTP requests, allowing for interaction with web APIs through standard RESTful methods such as GET, POST, PUT, and DELETE.</p> <p>Arguments: - <code>options</code> (table): A table containing details about the request (e.g., URL, method, headers).</p> <p>Returns: - (table): A response table that contains information such as the status code and body of the response.</p>"},{"location":"categories/http_websocket_requests/#http_request","title":"http_request","text":"<p>Performs an HTTP request.</p> <p>Description: <code>http_request</code> is another function used to execute HTTP requests, allowing for a variety of HTTP methods including custom headers and bodies.</p> <p>Arguments: - <code>options</code> (table): A table specifying request parameters like URL, method, headers, and body.</p> <p>Returns: - (table): The response from the server, including status and data.</p>"},{"location":"categories/http_websocket_requests/#httpget","title":"HttpGet","text":"<p>Performs a GET request.</p> <p>Description: <code>HttpGet</code> simplifies making HTTP GET requests to retrieve information from a given URL.</p> <p>Arguments: - <code>url</code> (string): The URL to send the GET request to.</p> <p>Returns: - (string): The response data from the server.</p>"},{"location":"categories/http_websocket_requests/#httpgetasync","title":"HttpGetAsync","text":"<p>Performs an asynchronous GET request.</p> <p>Description: <code>HttpGetAsync</code> allows for making a non-blocking GET request, useful when the script needs to continue running without waiting for the response.</p> <p>Arguments: - <code>url</code> (string): The URL to send the GET request to.</p> <p>Returns: - (function): A callback function that processes the response when available.</p>"},{"location":"categories/http_websocket_requests/#websocket","title":"WebSocket","text":"<p>Creates a new WebSocket connection.</p> <p>Description: <code>WebSocket</code> allows for the creation of a WebSocket connection, facilitating real-time, full-duplex communication with a server.</p> <p>Arguments: - <code>url</code> (string): The URL of the WebSocket server to connect to.</p> <p>Returns: - (object): A WebSocket object that can send and receive messages.</p> <p>Methods: - <code>send</code> (string): Sends a message through the WebSocket. - <code>close</code> (void): Closes the WebSocket connection.</p>"},{"location":"categories/input_management/","title":"Input Management","text":"<p>This section covers all functions related to managing keyboard and mouse inputs.</p>"},{"location":"categories/input_management/#keyboard-and-mouse-functions","title":"Keyboard and Mouse Functions","text":""},{"location":"categories/input_management/#keypress","title":"keypress","text":"<p>Simulates a key press for the specified KeyCode.</p> <p>Description: <code>keypress</code> sends an input signal to simulate pressing down a key on the keyboard.</p> <p>Arguments: - <code>keycode</code> (string): The code of the key to be pressed.</p> <p>Returns: - (bool): Returns true if the key press was successfully simulated.</p>"},{"location":"categories/input_management/#keyrelease","title":"keyrelease","text":"<p>Simulates a key release for the specified KeyCode.</p> <p>Description: <code>keyrelease</code> sends an input signal to simulate releasing a key on the keyboard.</p> <p>Arguments: - <code>keycode</code> (string): The code of the key to be released.</p> <p>Returns: - (bool): Returns true if the key release was successfully simulated.</p>"},{"location":"categories/input_management/#keyrelease_1","title":"KeyRelease","text":"<p>Simulates a key release.</p> <p>Description: <code>KeyRelease</code> is used to simulate releasing a specific key on the keyboard.</p> <p>Arguments: - <code>keycode</code> (string): The key code to be released.</p> <p>Returns: - (bool): Returns true if the key release was successfully simulated.</p>"},{"location":"categories/input_management/#mousemoveabs","title":"MouseMoveAbs","text":"<p>Moves the mouse to the specified absolute coordinates.</p> <p>Description: <code>MouseMoveAbs</code> sets the mouse position to specific absolute screen coordinates.</p> <p>Arguments: - <code>x</code> (number): The X coordinate to move the mouse to. - <code>y</code> (number): The Y coordinate to move the mouse to.</p> <p>Returns: - (bool): Returns true if the mouse movement was successful.</p>"},{"location":"categories/input_management/#mousemoverel","title":"MouseMoveRel","text":"<p>Moves the mouse relative to its current position.</p> <p>Description: <code>MouseMoveRel</code> moves the mouse by a specified offset relative to its current position.</p> <p>Arguments: - <code>dx</code> (number): The change in X position. - <code>dy</code> (number): The change in Y position.</p> <p>Returns: - (bool): Returns true if the mouse movement was successful.</p>"},{"location":"categories/input_management/#mouse1click","title":"mouse1click","text":"<p>Simulates a left mouse click at the current mouse position.</p> <p>Description: <code>mouse1click</code> sends an input signal to simulate a left mouse button click.</p> <p>Returns: - (bool): Returns true if the mouse click was successfully simulated.</p>"},{"location":"categories/input_management/#mouse2click","title":"mouse2click","text":"<p>Simulates a right mouse click at the current mouse position.</p> <p>Description: <code>mouse2click</code> sends an input signal to simulate a right mouse button click.</p> <p>Returns: - (bool): Returns true if the mouse click was successfully simulated.</p>"},{"location":"categories/input_management/#mouse1press","title":"Mouse1Press","text":"<p>Simulates a left mouse button press.</p> <p>Description: <code>Mouse1Press</code> simulates pressing the left mouse button without releasing it.</p> <p>Returns: - (bool): Returns true if the mouse button press was successful.</p>"},{"location":"categories/input_management/#mouse2press","title":"Mouse2Press","text":"<p>Simulates a right mouse button press.</p> <p>Description: <code>Mouse2Press</code> simulates pressing the right mouse button without releasing it.</p> <p>Returns: - (bool): Returns true if the mouse button press was successful.</p>"},{"location":"categories/input_management/#mouse1release","title":"Mouse1Release","text":"<p>Simulates a left mouse button release.</p> <p>Description: <code>Mouse1Release</code> simulates releasing the left mouse button.</p> <p>Returns: - (bool): Returns true if the mouse button release was successful.</p>"},{"location":"categories/input_management/#mouse2release","title":"Mouse2Release","text":"<p>Simulates a right mouse button release.</p> <p>Description: <code>Mouse2Release</code> simulates releasing the right mouse button.</p> <p>Returns: - (bool): Returns true if the mouse button release was successful.</p>"},{"location":"categories/input_management/#mousescroll","title":"MouseScroll","text":"<p>Simulates a scroll event.</p> <p>Description: <code>MouseScroll</code> simulates scrolling the mouse wheel forward or backward.</p> <p>Arguments: - <code>direction</code> (string): The direction to scroll, either \"up\" or \"down\".</p> <p>Returns: - (bool): Returns true if the scroll was successful.</p>"},{"location":"categories/input_management/#mousemoverel_1","title":"mousemoverel","text":"<p>Moves the mouse relative to its current position.</p> <p>Description: <code>mousemoverel</code> moves the mouse by a specified offset relative to its current position.</p> <p>Arguments: - <code>dx</code> (number): The change in X position. - <code>dy</code> (number): The change in Y position.</p> <p>Returns: - (bool): Returns true if the mouse movement was successful.</p>"},{"location":"categories/input_management/#mousemoveabs_1","title":"mousemoveabs","text":"<p>Moves the mouse to the specified coordinates.</p> <p>Description: <code>mousemoveabs</code> sets the mouse position to specific screen coordinates.</p> <p>Arguments: - <code>x</code> (number): The X coordinate to move the mouse to. - <code>y</code> (number): The Y coordinate to move the mouse to.</p> <p>Returns: - (bool): Returns true if the mouse movement was successful.</p>"},{"location":"categories/metatable_closure_management/","title":"Metatable and Closure Management","text":"<p>This section covers all functions related to metatable manipulation and closure handling.</p>"},{"location":"categories/metatable_closure_management/#metatable-and-closure-functions","title":"Metatable and Closure Functions","text":""},{"location":"categories/metatable_closure_management/#getrawmetatable","title":"getrawmetatable","text":"<p>Returns an object's metatable, ignoring the <code>__metatable</code> metamethod.</p> <p>Description: <code>getrawmetatable</code> allows access to the original metatable of an object, bypassing any restrictions that may be in place via the <code>__metatable</code> field.</p> <p>Arguments: - <code>object</code> (table): The object whose metatable is to be retrieved.</p> <p>Returns: - (table): The original metatable of the object.</p>"},{"location":"categories/metatable_closure_management/#setrawmetatable","title":"setrawmetatable","text":"<p>Sets an object's metatable, ignoring the <code>__metatable</code> metamethod.</p> <p>Description: <code>setrawmetatable</code> sets a new metatable for an object, even if the <code>__metatable</code> field is present, which normally prevents modification.</p> <p>Arguments: - <code>object</code> (table): The object whose metatable is to be set. - <code>metatable</code> (table): The new metatable to assign.</p> <p>Returns: - (bool): Returns true if the metatable was successfully set, false otherwise.</p>"},{"location":"categories/metatable_closure_management/#clonefunction","title":"clonefunction","text":"<p>Clones a function.</p> <p>Description: <code>clonefunction</code> creates an exact copy of a Lua function, which can then be used independently of the original.</p> <p>Arguments: - <code>func</code> (function): The function to be cloned.</p> <p>Returns: - (function): The cloned function.</p>"},{"location":"categories/metatable_closure_management/#newcclosure","title":"newcclosure","text":"<p>Creates a C wrapper around <code>closure</code>.</p> <p>Description: <code>newcclosure</code> wraps a given Lua function in a C closure, which can improve performance and security when interacting with certain systems.</p> <p>Arguments: - <code>closure</code> (function): The Lua function to wrap.</p> <p>Returns: - (function): The C closure wrapping the original function.</p>"},{"location":"categories/metatable_closure_management/#hookfunction","title":"hookfunction","text":"<p>Hooks a Lua or C function in-place. Returns a copy of the original function.</p> <p>Description: <code>hookfunction</code> replaces a target function with a new function, allowing custom behavior to be injected. The original function is returned for further use if needed.</p> <p>Arguments: - <code>target</code> (function): The function to be hooked. - <code>replacement</code> (function): The function that will replace the original.</p> <p>Returns: - (function): The original, unhooked function.</p>"},{"location":"categories/metatable_closure_management/#hookmetamethod","title":"hookmetamethod","text":"<p>Hooks a metatable method.</p> <p>Description: <code>hookmetamethod</code> allows you to replace a specific method in an object's metatable, enabling custom behavior when that method is called.</p> <p>Arguments: - <code>object</code> (table): The object whose metatable method is to be hooked. - <code>method</code> (string): The name of the method to hook. - <code>replacement</code> (function): The function that will replace the original method.</p> <p>Returns: - (function): The original method before it was hooked.</p>"},{"location":"categories/metatable_closure_management/#setreadonly","title":"setreadonly","text":"<p>Sets a table's read-only flag.</p> <p>Description: <code>setreadonly</code> is used to make a table read-only, preventing further modifications to its keys or values.</p> <p>Arguments: - <code>table</code> (table): The table to modify. - <code>readonly</code> (bool): Whether the table should be set to read-only (true) or writable (false).</p> <p>Returns: - (bool): Returns true if the operation was successful, false otherwise.</p>"},{"location":"categories/metatable_closure_management/#makewritable","title":"makewritable","text":"<p>Equivalent to <code>setreadonly(table, false)</code>.</p> <p>Description: <code>makewritable</code> is a convenience function to make a table writable, allowing modifications.</p> <p>Arguments: - <code>table</code> (table): The table to modify.</p> <p>Returns: - (bool): Returns true if the table was successfully made writable.</p>"},{"location":"categories/metatable_closure_management/#make_readonly","title":"make_readonly","text":"<p>Equivalent to <code>setreadonly(table, true)</code>.</p> <p>Description: <code>make_readonly</code> is a convenience function to make a table read-only.</p> <p>Arguments: - <code>table</code> (table): The table to modify.</p> <p>Returns: - (bool): Returns true if the table was successfully made read-only.</p>"},{"location":"categories/metatable_closure_management/#setscriptable","title":"setscriptable","text":"<p>Sets a property's scriptable flag.</p> <p>Description: <code>setscriptable</code> controls whether a property of an object can be accessed or modified by scripts.</p> <p>Arguments: - <code>object</code> (Instance): The object whose property is to be modified. - <code>property</code> (string): The name of the property. - <code>scriptable</code> (bool): Whether the property should be scriptable (true) or not (false).</p> <p>Returns: - (bool): Returns true if the operation was successful, false otherwise.</p>"},{"location":"categories/metatable_closure_management/#isscriptable","title":"isscriptable","text":"<p>Returns whether a property is scriptable.</p> <p>Description: <code>isscriptable</code> checks if a specific property of an object can be accessed or modified by scripts.</p> <p>Arguments: - <code>object</code> (Instance): The object whose property is being checked. - <code>property</code> (string): The name of the property.</p> <p>Returns: - (bool): Returns true if the property is scriptable, false otherwise.</p>"},{"location":"categories/miscellaneous/","title":"Miscellaneous Functions","text":"<p>This section covers various functions that do not fit into other specific categories.</p>"},{"location":"categories/miscellaneous/#miscellaneous-functions_1","title":"Miscellaneous Functions","text":""},{"location":"categories/miscellaneous/#identifyexecutor","title":"identifyexecutor","text":"<p>Returns \"Script Executer Name\" and version string.</p> <p>Description: <code>identifyexecutor</code> identifies the executor being used, providing details such as its name and version.</p> <p>Returns: - (string): The name and version of the executor.</p>"},{"location":"categories/miscellaneous/#iswindowactive","title":"iswindowactive","text":"<p>Returns true if the game window is active.</p> <p>Description: <code>iswindowactive</code> checks if the game window currently has focus, which can be useful for determining user attention.</p> <p>Returns: - (bool): Returns true if the window is active, false otherwise.</p>"},{"location":"categories/miscellaneous/#lz4compress","title":"lz4compress","text":"<p>Compresses data using LZ4 compression.</p> <p>Description: <code>lz4compress</code> compresses the provided data using the LZ4 algorithm, making it smaller and easier to store or transfer.</p> <p>Arguments: - <code>data</code> (string): The data to be compressed.</p> <p>Returns: - (string): The compressed data.</p>"},{"location":"categories/miscellaneous/#lz4decompress","title":"lz4decompress","text":"<p>Decompresses LZ4 compressed data.</p> <p>Description: <code>lz4decompress</code> takes compressed data and restores it to its original form using LZ4 decompression.</p> <p>Arguments: - <code>data</code> (string): The LZ4 compressed data.</p> <p>Returns: - (string): The decompressed data.</p>"},{"location":"categories/miscellaneous/#base64_encode","title":"base64_encode","text":"<p>Encodes input in Base64.</p> <p>Description: <code>base64_encode</code> encodes a given string into Base64 format, which is often used for data transmission and storage.</p> <p>Arguments: - <code>input</code> (string): The string to be encoded.</p> <p>Returns: - (string): The Base64 encoded representation of the input.</p>"},{"location":"categories/miscellaneous/#base64_decode","title":"base64_decode","text":"<p>Decodes input from Base64.</p> <p>Description: <code>base64_decode</code> takes a Base64 encoded string and decodes it back to its original form.</p> <p>Arguments: - <code>input</code> (string): The Base64 encoded string.</p> <p>Returns: - (string): The original, decoded string.</p>"},{"location":"categories/miscellaneous/#crypt","title":"crypt","text":"<p>Provides encryption and hashing functions.</p> <p>Description: <code>crypt</code> provides a set of encryption and hashing utilities, which can be used to secure data.</p> <p>Arguments: - <code>operation</code> (string): The type of operation (e.g., \"encrypt\", \"decrypt\"). - <code>data</code> (string): The data to be processed.</p> <p>Returns: - (string): The processed data after encryption or decryption.</p>"},{"location":"categories/miscellaneous/#cache","title":"cache","text":"<p>Provides caching functionality.</p> <p>Description: <code>cache</code> allows you to store data temporarily for quick retrieval, reducing the need to recompute or reload it.</p> <p>Arguments: - <code>key</code> (string): The key under which the data will be cached. - <code>value</code> (any): The value to be cached.</p> <p>Returns: - (bool): Returns true if the data was successfully cached.</p>"},{"location":"categories/miscellaneous/#drawing","title":"Drawing","text":"<p>Accesses drawing functions for rendering GUI elements.</p> <p>Description: <code>Drawing</code> provides access to various functions for drawing and rendering custom graphical elements within the game window.</p> <p>Arguments: - <code>type</code> (string): The type of drawing (e.g., \"Line\", \"Text\").</p> <p>Returns: - (object): A drawing object with methods to manipulate the rendered elements.</p>"},{"location":"categories/miscellaneous/#compareinstances","title":"compareinstances","text":"<p>Compares two instances for equality.</p> <p>Description: <code>compareinstances</code> checks if two given instances are the same, which is useful for verifying object references.</p> <p>Arguments: - <code>instance1</code> (Instance): The first instance to compare. - <code>instance2</code> (Instance): The second instance to compare.</p> <p>Returns: - (bool): Returns true if the instances are equal, false otherwise.</p>"},{"location":"categories/signal_event_management/","title":"Signal and Event Management","text":"<p>This section covers all functions related to signal and event handling.</p>"},{"location":"categories/signal_event_management/#signal-and-event-functions","title":"Signal and Event Functions","text":""},{"location":"categories/signal_event_management/#firesignal","title":"firesignal","text":"<p>Fires a signal, including engine connections.</p> <p>Description: <code>firesignal</code> triggers a specific signal, calling all connected listeners, including those tied to game engine events.</p> <p>Arguments: - <code>signal</code> (RBXScriptSignal): The signal to be fired.</p> <p>Returns: - (bool): Returns true if the signal was successfully fired.</p>"},{"location":"categories/signal_event_management/#fireproximityprompt","title":"fireproximityprompt","text":"<p>Emulates triggering a <code>ProximityPrompt</code>.</p> <p>Description: <code>fireproximityprompt</code> allows you to simulate interacting with a <code>ProximityPrompt</code>, which is typically activated by a player in-game.</p> <p>Arguments: - <code>prompt</code> (ProximityPrompt): The proximity prompt to be triggered. - <code>distance</code> (number, optional): The distance from which the prompt is fired (defaults to maximum).</p> <p>Returns: - (bool): Returns true if the prompt was successfully fired.</p>"},{"location":"categories/signal_event_management/#firetouchinterest","title":"firetouchinterest","text":"<p>Emulates a <code>Touched</code> event on <code>to_touch</code> with <code>part</code>.</p> <p>Description: <code>firetouchinterest</code> is used to programmatically fire a <code>Touched</code> event, emulating physical contact between two parts.</p> <p>Arguments: - <code>part</code> (BasePart): The part initiating the touch. - <code>to_touch</code> (BasePart): The part to be touched. - <code>toggle</code> (number): Indicates whether the touch is beginning (0) or ending (1).</p> <p>Returns: - (bool): Returns true if the touch event was successfully fired.</p>"},{"location":"categories/signal_event_management/#fireclickdetector","title":"fireclickdetector","text":"<p>Emulates clicking a <code>ClickDetector</code>.</p> <p>Description: <code>fireclickdetector</code> simulates a player clicking a <code>ClickDetector</code>, which is used to interact with parts in the game.</p> <p>Arguments: - <code>clickdetector</code> (ClickDetector): The click detector to be activated. - <code>distance</code> (number, optional): The distance from which the click is fired (defaults to maximum).</p> <p>Returns: - (bool): Returns true if the click event was successfully simulated.</p>"},{"location":"categories/thread_context_management/","title":"Thread and Context Management","text":"<p>This section covers all functions related to thread management and context-level handling.</p>"},{"location":"categories/thread_context_management/#thread-and-context-functions","title":"Thread and Context Functions","text":""},{"location":"categories/thread_context_management/#getthreadcontext","title":"getthreadcontext","text":"<p>Returns the current thread's context level.</p> <p>Description: <code>getthreadcontext</code> retrieves the current execution context level of the thread, which determines what actions the thread can perform within the game.</p> <p>Returns: - (number): The context level of the current thread.</p>"},{"location":"categories/thread_context_management/#setthreadcontext","title":"setthreadcontext","text":"<p>Sets the current thread's context level.</p> <p>Description: <code>setthreadcontext</code> sets the execution context level for the current thread, which can elevate or limit the permissions for executing certain actions.</p> <p>Arguments: - <code>level</code> (number): The context level to set for the thread.</p> <p>Returns: - (bool): Returns true if the context level was successfully set.</p>"},{"location":"categories/thread_context_management/#queue_on_teleport","title":"queue_on_teleport","text":"<p>Queues a script to be executed after the next teleport.</p> <p>Description: <code>queue_on_teleport</code> allows you to schedule a script to run automatically after the player has teleported to a new server.</p> <p>Arguments: - <code>script</code> (string): The script to be queued for execution.</p> <p>Returns: - (bool): Returns true if the script was successfully queued.</p>"},{"location":"categories/thread_context_management/#getthreadidentity","title":"getthreadidentity","text":"<p>Returns the current thread's identity level.</p> <p>Description: <code>getthreadidentity</code> retrieves the identity level of the current thread, which can provide information about the permissions assigned to the thread.</p> <p>Returns: - (number): The identity level of the current thread.</p>"},{"location":"categories/thread_context_management/#setidentity","title":"setidentity","text":"<p>Sets the thread identity.</p> <p>Description: <code>setidentity</code> changes the identity level of the thread, which controls the permissions for interacting with certain game components.</p> <p>Arguments: - <code>level</code> (number): The identity level to set for the thread.</p> <p>Returns: - (bool): Returns true if the identity level was successfully set.</p>"},{"location":"examples/Drawing_example/","title":"Drawing","text":"<p>Description:</p> <p>This function demonstrates the usage of the Drawing API.</p> <p>Example:</p> <pre><code>-- Create a new drawing object\nlocal circle = Drawing.new('Circle')\n\ncircle.Radius = 50\ncircle.Position = Vector2.new(200, 200)\ncircle.Visible = true\n\nprint(\"Drawing created\")\n</code></pre>"},{"location":"examples/GetObjects_example/","title":"GetObjects","text":"<p>Description:</p> <p>This function demonstrates the usage of the GetObjects API.</p> <p>Example:</p> <pre><code>-- Get Roblox objects from an asset ID\nlocal objects = GetObjects(\"rbxassetid://123456\")\n\nfor _, obj in ipairs(objects) do\n    print(obj)\nend\n</code></pre>"},{"location":"examples/HttpGetAsync_example/","title":"HttpGetAsync","text":"<p>Description:</p> <p>This function demonstrates the usage of the HttpGetAsync API.</p> <p>Example:</p> <pre><code>-- Make an asynchronous HTTP GET request\nHttpGetAsync(\"https://example.com\", function(response)\n    print(response)\nend)\n</code></pre>"},{"location":"examples/HttpGet_example/","title":"HttpGet","text":"<p>Description:</p> <p>This function demonstrates the usage of the HttpGet API.</p> <p>Example:</p> <pre><code>-- Perform an HTTP GET request\nlocal response = HttpGet('https://example.com')\n\nif response then\n    print(\"Response: \" .. response)\nelse\n    print(\"Failed to get response\")\nend\n</code></pre>"},{"location":"examples/KeyDown_example/","title":"KeyDown","text":"<p>Description:</p> <p>This function demonstrates the usage of the KeyDown API.</p> <p>Example:</p> <pre><code>-- Simulate a key press\nKeyDown('Q')\n\nprint(\"Key Q pressed\")\n</code></pre>"},{"location":"examples/KeyRelease_example/","title":"keyrelease","text":"<p>Description:</p> <p>This function demonstrates the usage of the keyrelease API.</p> <p>Example:</p> <pre><code>-- Release a key\nkeyrelease('X')\n\nprint(\"Released key: X\")\n</code></pre>"},{"location":"examples/Mouse1Press_example/","title":"mouse1press","text":"<p>Description:</p> <p>This function demonstrates the usage of the mouse1press API.</p> <p>Example:</p> <pre><code>-- Press the left mouse button (alternative)\nmouse1press()\n\nprint(\"Left mouse button pressed\")\n</code></pre>"},{"location":"examples/Mouse1Release_example/","title":"mouse1release","text":"<p>Description:</p> <p>This function demonstrates the usage of the mouse1release API.</p> <p>Example:</p> <pre><code>-- Release the left mouse button (alternative)\nmouse1release()\n\nprint(\"Left mouse button released\")\n</code></pre>"},{"location":"examples/Mouse2Press_example/","title":"mouse2press","text":"<p>Description:</p> <p>This function demonstrates the usage of the mouse2press API.</p> <p>Example:</p> <pre><code>-- Press the right mouse button\nmouse2press()\n\nprint(\"Right mouse button pressed\")\n</code></pre>"},{"location":"examples/Mouse2Release_example/","title":"mouse2release","text":"<p>Description:</p> <p>This function demonstrates the usage of the mouse2release API.</p> <p>Example:</p> <pre><code>-- Release the right mouse button (alternative)\nmouse2release()\n\nprint(\"Right mouse button released\")\n</code></pre>"},{"location":"examples/MouseMoveAbs_example/","title":"mousemoveabs","text":"<p>Description:</p> <p>This function demonstrates the usage of the mousemoveabs API.</p> <p>Example:</p> <pre><code>-- Move the mouse to an absolute position\nmousemoveabs(100, 100)\n\nprint(\"Mouse moved to absolute position (100, 100)\")\n</code></pre>"},{"location":"examples/MouseMoveRel_example/","title":"MouseMoveRel","text":"<p>Description:</p> <p>This function demonstrates the usage of the MouseMoveRel API.</p> <p>Example:</p> <pre><code>-- Move the mouse relative to its current position\nMouseMoveRel(10, 20)\n\nprint(\"Mouse moved relative by (10, 20)\")\n</code></pre>"},{"location":"examples/MouseMoveRelative_example/","title":"MouseMoveRelative","text":"<p>Description:</p> <p>This function demonstrates the usage of the MouseMoveRelative API.</p> <p>Example:</p> <pre><code>-- Move the mouse relative to its current position\nMouseMoveRelative(100, 200)\n\nprint(\"Mouse moved relative by (100, 200)\")\n</code></pre>"},{"location":"examples/WebSocket_example/","title":"WebSocket","text":"<p>Description:</p> <p>This function demonstrates the usage of the WebSocket API.</p> <p>Example:</p> <pre><code>-- Connect to a WebSocket\nlocal ws = WebSocket.connect('wss://example.com')\n\nws.OnMessage:Connect(function(msg)\n    print(\"Received message:\", msg)\nend)\n</code></pre>"},{"location":"examples/_G_example/","title":"_G","text":"<p>Description:</p> <p>This function demonstrates the usage of the _G API.</p> <p>Example:</p> <pre><code>-- Set a global variable\n_G.GlobalValue = 42\n\nprint(\"Global value set to:\", _G.GlobalValue)\n</code></pre>"},{"location":"examples/appendfile_example/","title":"appendfile","text":"<p>Description:</p> <p>This function demonstrates the usage of the appendfile API.</p> <p>Example:</p> <pre><code>-- Append text to a file\nappendfile(\"somefile.txt\", \"Appending this text\")\n\nprint(\"Text appended to file\")\n</code></pre>"},{"location":"examples/base64_decode_example/","title":"base64_decode","text":"<p>Description:</p> <p>This function demonstrates the usage of the base64_decode API.</p> <p>Example:</p> <pre><code>-- Decode a base64 string\nlocal decoded = base64_decode('encoded_text')\n\nprint(\"Decoded text:\", decoded)\n</code></pre>"},{"location":"examples/base64_encode_example/","title":"base64_encode","text":"<p>Description:</p> <p>This function demonstrates the usage of the base64_encode API.</p> <p>Example:</p> <pre><code>-- Encode a string in base64\nlocal encoded = base64_encode('Some text to encode')\n\nprint(\"Encoded text:\", encoded)\n</code></pre>"},{"location":"examples/base64_example/","title":"base64","text":"<p>Description:</p> <p>This function demonstrates the usage of the base64 API.</p> <p>Example:</p> <pre><code>-- Encode data in base64\nlocal encoded = base64.encode('text')\n\nprint(\"Base64 encoded:\", encoded)\n</code></pre>"},{"location":"examples/bit_example/","title":"bit","text":"<p>Description:</p> <p>This function demonstrates the usage of the bit API.</p> <p>Example:</p> <pre><code>-- Perform a bitwise operation\nlocal bit_and = bit.band(5, 3)\n\nprint(\"Bitwise AND result:\", bit_and)\n</code></pre>"},{"location":"examples/cache_example/","title":"cache","text":"<p>Description:</p> <p>This function demonstrates the usage of the cache API.</p> <p>Example:</p> <pre><code>-- Store and retrieve data from the cache\ncache.store('key', 'value')\n\nlocal value = cache.retrieve('key')\n\nprint(\"Cached value:\", value)\n</code></pre>"},{"location":"examples/checkcaller_example/","title":"checkcaller","text":"<p>Description:</p> <p>This function demonstrates the usage of the checkcaller API.</p> <p>Example:</p> <pre><code>-- Check if the caller is the script\nlocal is_caller = checkcaller()\n\nif is_caller then\n    print(\"The caller is the script\")\nelse\n    print(\"The caller is not the script\")\nend\n</code></pre>"},{"location":"examples/checkclosure_example/","title":"checkclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the checkclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a valid closure\nlocal is_valid = checkclosure(some_function)\n\nprint(\"Is valid closure: \" .. tostring(is_valid))\n</code></pre>"},{"location":"examples/checkinst_example/","title":"checkinst","text":"<p>Description:</p> <p>This function demonstrates the usage of the checkinst API.</p> <p>Example:</p> <pre><code>-- Check if an instance is valid\nlocal valid = checkinst(some_instance)\n\nif valid then\n    print(\"Instance is valid\")\nelse\n    print(\"Instance is not valid\")\nend\n</code></pre>"},{"location":"examples/cleardrawcache_example/","title":"cleardrawcache","text":"<p>Description:</p> <p>This function demonstrates the usage of the cleardrawcache API.</p> <p>Example:</p> <pre><code>-- Clear the drawing cache\ncleardrawcache()\n\nprint(\"Drawing cache cleared\")\n</code></pre>"},{"location":"examples/clonefunction_example/","title":"clonefunction","text":"<p>Description:</p> <p>This function demonstrates the usage of the clonefunction API.</p> <p>Example:</p> <pre><code>-- Clone an existing function\nlocal function original_function()\n    print(\"Original function called\")\nend\n\nlocal new_function = clonefunction(original_function)\n\nnew_function()  -- Should print: Original function called\n</code></pre>"},{"location":"examples/cloneref_example/","title":"cloneref","text":"<p>Description:</p> <p>This function demonstrates the usage of the cloneref API.</p> <p>Example:</p> <pre><code>-- Clone a reference\nlocal original_ref = Instance.new(\"Part\")\nlocal cloned_ref = cloneref(original_ref)\n\nprint(cloned_ref)\n</code></pre>"},{"location":"examples/compareinstances_example/","title":"compareinstances","text":"<p>Description:</p> <p>This function demonstrates the usage of the compareinstances API.</p> <p>Example:</p> <pre><code>-- Compare two instances\nlocal are_equal = compareinstances(instance1, instance2)\n\nif are_equal then\n    print(\"Instances are equal\")\nelse\n    print(\"Instances are not equal\")\nend\n</code></pre>"},{"location":"examples/create_comm_channel_example/","title":"create_comm_channel","text":"<p>Description:</p> <p>This function demonstrates the usage of the create_comm_channel API.</p> <p>Example:</p> <pre><code>-- Create a communication channel\nlocal channel = create_comm_channel(\"channel_name\")\n\nprint(\"Communication channel created: \" .. tostring(channel))\n</code></pre>"},{"location":"examples/crypt_example/","title":"crypt","text":"<p>Description:</p> <p>This function demonstrates the usage of the crypt API.</p> <p>Example:</p> <pre><code>-- Encrypt data\nlocal encrypted = crypt.encrypt('data', 'key')\n\nprint(\"Encrypted data:\", encrypted)\n</code></pre>"},{"location":"examples/debug_example/","title":"debug","text":"<p>Description:</p> <p>This function demonstrates the usage of the debug API.</p> <p>Example:</p> <pre><code>-- Debug a message\ndebug(\"This is a debug message for testing\")\n</code></pre>"},{"location":"examples/decompile_example/","title":"decompile","text":"<p>Description:</p> <p>This function demonstrates the usage of the decompile API.</p> <p>Example:</p> <pre><code>-- Decompile a function\nlocal source = decompile(some_function)\n\nprint(\"Decompiled source:\", source)\n</code></pre>"},{"location":"examples/delfile_example/","title":"delfile","text":"<p>Description:</p> <p>This function demonstrates the usage of the delfile API.</p> <p>Example:</p> <pre><code>-- Delete a file\ndelfile('somefile.txt')\n\nprint(\"File deleted\")\n</code></pre>"},{"location":"examples/delfolder_example/","title":"delfolder","text":"<p>Description:</p> <p>This function demonstrates the usage of the delfolder API.</p> <p>Example:</p> <pre><code>-- Delete a folder\ndelfolder('folderpath')\n\nprint(\"Folder deleted\")\n</code></pre>"},{"location":"examples/disassemble_example/","title":"disassemble","text":"<p>Description:</p> <p>This function demonstrates the usage of the disassemble API.</p> <p>Example:</p> <pre><code>-- Disassemble a function\nlocal disassembly = disassemble(some_function)\n\nprint(\"Function disassembly: \" .. tostring(disassembly))\n</code></pre>"},{"location":"examples/dofile_example/","title":"dofile","text":"<p>Description:</p> <p>This function demonstrates the usage of the dofile API.</p> <p>Example:</p> <pre><code>-- Execute a Lua file\ndofile(\"script.lua\")\n</code></pre>"},{"location":"examples/dumpstring_example/","title":"dumpstring","text":"<p>Description:</p> <p>This function demonstrates the usage of the dumpstring API.</p> <p>Example:</p> <pre><code>-- Dump a string\nlocal dumped = dumpstring('This is a test string')\n\nprint(dumped)\n</code></pre>"},{"location":"examples/fireclickdetector_example/","title":"fireclickdetector","text":"<p>Description:</p> <p>This function demonstrates the usage of the fireclickdetector API.</p> <p>Example:</p> <pre><code>-- Fire a click detector\nlocal click_detector = Instance.new(\"ClickDetector\")\n\nfireclickdetector(click_detector)\n\nprint(\"Click detector fired\")\n</code></pre>"},{"location":"examples/fireproximityprompt_example/","title":"fireproximityprompt","text":"<p>Description:</p> <p>This function demonstrates the usage of the fireproximityprompt API.</p> <p>Example:</p> <pre><code>-- Fire a proximity prompt\nlocal proximityPrompt = Instance.new(\"ProximityPrompt\")\n\nfireproximityprompt(proximityPrompt)\n\nprint(\"Proximity prompt fired\")\n</code></pre>"},{"location":"examples/firesignal_example/","title":"firesignal","text":"<p>Description:</p> <p>This function demonstrates the usage of the firesignal API.</p> <p>Example:</p> <pre><code>-- Fire a signal\nlocal signal = Instance.new(\"BindableEvent\")\n\n-- Connect the signal to a function\nsignal.Event:Connect(function()\n    print(\"Signal fired!\")\nend)\n\n-- Fire the signal\nfiresignal(signal.Event)\n</code></pre>"},{"location":"examples/firetouchinterest_example/","title":"firetouchinterest","text":"<p>Description:</p> <p>This function demonstrates the usage of the firetouchinterest API.</p> <p>Example:</p> <pre><code>-- Fire a touch interest\nfiretouchinterest(part1, part2, 0)\n\nprint(\"Touch interest fired\")\n</code></pre>"},{"location":"examples/get_comm_channel_example/","title":"get_comm_channel","text":"<p>Description:</p> <p>This function demonstrates the usage of the get_comm_channel API.</p> <p>Example:</p> <pre><code>-- Get an existing communication channel\nlocal channel = get_comm_channel(\"channel_name\")\n\nprint(\"Communication channel: \" .. tostring(channel))\n</code></pre>"},{"location":"examples/get_fps_cap_example/","title":"get_fps_cap","text":"<p>Description:</p> <p>This function demonstrates the usage of the get_fps_cap API.</p> <p>Example:</p> <pre><code>-- Get the current FPS cap\nlocal fps_cap = get_fps_cap()\n\nprint(\"Current FPS cap: \" .. fps_cap)\n</code></pre>"},{"location":"examples/get_thread_identity_example/","title":"get_thread_identity","text":"<p>Description:</p> <p>This function demonstrates the usage of the get_thread_identity API.</p> <p>Example:</p> <pre><code>-- Get the current thread identity\nlocal identity = get_thread_identity()\n\nprint(\"Thread identity: \" .. identity)\n</code></pre>"},{"location":"examples/getactors_example/","title":"getactors","text":"<p>Description:</p> <p>This function demonstrates the usage of the getactors API.</p> <p>Example:</p> <pre><code>-- Get all actors\nlocal actors = getactors()\n\nfor _, actor in ipairs(actors) do\n    print(actor:GetFullName())\nend\n</code></pre>"},{"location":"examples/getaddr_example/","title":"getaddr","text":"<p>Description:</p> <p>This function demonstrates the usage of the getaddr API.</p> <p>Example:</p> <pre><code>-- Get the memory address of a function\nlocal address = getaddr(some_function)\n\nprint(\"Function address:\", address)\n</code></pre>"},{"location":"examples/getcallbackvalue_example/","title":"getcallbackvalue","text":"<p>Description:</p> <p>This function demonstrates the usage of the getcallbackvalue API.</p> <p>Example:</p> <pre><code>-- Get the value of a callback\nlocal value = getcallbackvalue(some_callback)\n\nprint(\"Callback value: \" .. tostring(value))\n</code></pre>"},{"location":"examples/getcallingscript_example/","title":"getcallingscript","text":"<p>Description:</p> <p>This function demonstrates the usage of the getcallingscript API.</p> <p>Example:</p> <pre><code>-- Get the calling script\nlocal calling_script = getcallingscript()\n\nprint(\"Calling script: \" .. tostring(calling_script))\n</code></pre>"},{"location":"examples/getconnections_example/","title":"getconnections","text":"<p>Description:</p> <p>This function demonstrates the usage of the getconnections API.</p> <p>Example:</p> <pre><code>-- Get all connections of an event\nlocal connections = getconnections(some_event)\n\nfor _, connection in ipairs(connections) do\n    print(connection.Function)\nend\n</code></pre>"},{"location":"examples/getconstant_example/","title":"getconstant","text":"<p>Description:</p> <p>This function demonstrates the usage of the getconstant API.</p> <p>Example:</p> <pre><code>-- Get a constant from a function\nlocal constant = getconstant(some_function, 1)\n\nprint(\"Constant value:\", constant)\n</code></pre>"},{"location":"examples/getconstants_example/","title":"getconstants","text":"<p>Description:</p> <p>This function demonstrates the usage of the getconstants API.</p> <p>Example:</p> <pre><code>-- Get all constants from a function\nlocal constants = getconstants(some_function)\n\nfor i, constant in ipairs(constants) do\n    print(\"Constant \" .. i .. \":\", constant)\nend\n</code></pre>"},{"location":"examples/getcustomasset_example/","title":"getcustomasset","text":"<p>Description:</p> <p>This function demonstrates the usage of the getcustomasset API.</p> <p>Example:</p> <pre><code>-- Get a custom asset\nlocal asset = getcustomasset('assetid')\n\nprint(\"Custom asset:\", asset)\n</code></pre>"},{"location":"examples/getexecutorname_example/","title":"getexecutorname","text":"<p>Description:</p> <p>This function demonstrates the usage of the getexecutorname API.</p> <p>Example:</p> <pre><code>-- Get the executor name\nlocal executor_name = getexecutorname()\n\nprint(\"Executor Name: \" .. executor_name)\n</code></pre>"},{"location":"examples/getfps_example/","title":"getfps","text":"<p>Description:</p> <p>This function demonstrates the usage of the getfps API.</p> <p>Example:</p> <pre><code>-- Get the current frame rate\nlocal fps = getfps()\n\nprint(\"Current FPS:\", fps)\n</code></pre>"},{"location":"examples/getfpscap_example/","title":"getfpscap","text":"<p>Description:</p> <p>This function demonstrates the usage of the getfpscap API.</p> <p>Example:</p> <pre><code>-- Get the current FPS cap\nlocal fps_cap = getfpscap()\n\nprint(\"Current FPS Cap: \" .. fps_cap)\n</code></pre>"},{"location":"examples/getgc_example/","title":"getgc","text":"<p>Description:</p> <p>This function demonstrates the usage of the getgc API.</p> <p>Example:</p> <pre><code>-- Get all garbage collected objects\nlocal gc_objects = getgc()\n\nfor _, obj in ipairs(gc_objects) do\n    print(obj)\nend\n</code></pre>"},{"location":"examples/getgenv_example/","title":"getgenv","text":"<p>Description:</p> <p>This function demonstrates the usage of the getgenv API.</p> <p>Example:</p> <pre><code>-- Get the global environment\nlocal genv = getgenv()\n\nprint(\"Global environment:\", genv)\n</code></pre>"},{"location":"examples/gethiddenproperty_example/","title":"gethiddenproperty","text":"<p>Description:</p> <p>This function demonstrates the usage of the gethiddenproperty API.</p> <p>Example:</p> <pre><code>-- Get a hidden property of an object\nlocal property = gethiddenproperty(some_object, \"HiddenPropertyName\")\n\nprint(property)\n</code></pre>"},{"location":"examples/gethui_example/","title":"gethui","text":"<p>Description:</p> <p>This function demonstrates the usage of the gethui API.</p> <p>Example:</p> <pre><code>-- Get the hidden UI\nlocal hui = gethui()\n\nprint(\"Hidden UI:\", hui)\n</code></pre>"},{"location":"examples/getidentity_example/","title":"getidentity","text":"<p>Description:</p> <p>This function demonstrates the usage of the getidentity API.</p> <p>Example:</p> <pre><code>-- Get the current identity level\nlocal identity = getidentity()\n\nprint(\"Current identity level: \" .. identity)\n</code></pre>"},{"location":"examples/getinfo_example/","title":"getinfo","text":"<p>Description:</p> <p>This function demonstrates the usage of the getinfo API.</p> <p>Example:</p> <pre><code>-- Get information about a function\nlocal info = getinfo(some_function)\n\nprint(\"Function info:\", info)\n</code></pre>"},{"location":"examples/getinstances_example/","title":"getinstances","text":"<p>Description:</p> <p>This function demonstrates the usage of the getinstances API.</p> <p>Example:</p> <pre><code>-- Get all instances in the game\nlocal instances = getinstances()\n\nfor _, instance in ipairs(instances) do\n    print(instance:GetFullName())\nend\n</code></pre>"},{"location":"examples/getloadedmodules_example/","title":"getloadedmodules","text":"<p>Description:</p> <p>This function demonstrates the usage of the getloadedmodules API.</p> <p>Example:</p> <pre><code>-- Get all loaded modules\nlocal modules = getloadedmodules()\n\nfor _, module in ipairs(modules) do\n    print(module)\nend\n</code></pre>"},{"location":"examples/getmodules_example/","title":"getmodules","text":"<p>Description:</p> <p>This function demonstrates the usage of the getmodules API.</p> <p>Example:</p> <pre><code>-- Get all loaded modules\nlocal modules = getmodules()\n\nfor _, module in ipairs(modules) do\n    print(module)\nend\n</code></pre>"},{"location":"examples/getnamecallmethod_example/","title":"getnamecallmethod","text":"<p>Description:</p> <p>This function demonstrates the usage of the getnamecallmethod API.</p> <p>Example:</p> <pre><code>-- Get the current namecall method\nlocal method = getnamecallmethod()\n\nprint(\"Namecall method:\", method)\n</code></pre>"},{"location":"examples/getnilinstances_example/","title":"getnilinstances","text":"<p>Description:</p> <p>This function demonstrates the usage of the getnilinstances API.</p> <p>Example:</p> <pre><code>-- Get all nil instances\nlocal nil_instances = getnilinstances()\n\nfor _, instance in ipairs(nil_instances) do\n    print(instance)\nend\n</code></pre>"},{"location":"examples/getproto_example/","title":"getproto","text":"<p>Description:</p> <p>This function demonstrates the usage of the getproto API.</p> <p>Example:</p> <pre><code>-- Get a specific proto from a function\nlocal proto = getproto(some_function, 1)\n\nprint(proto)\n</code></pre>"},{"location":"examples/getprotos_example/","title":"getprotos","text":"<p>Description:</p> <p>This function demonstrates the usage of the getprotos API.</p> <p>Example:</p> <pre><code>-- Get all protos of a function\nlocal protos = getprotos(some_function)\n\nfor i, proto in ipairs(protos) do\n    print(\"Proto \" .. i .. \":\", proto)\nend\n</code></pre>"},{"location":"examples/getrawmetatable_example/","title":"getrawmetatable","text":"<p>Description:</p> <p>This function demonstrates the usage of the getrawmetatable API.</p> <p>Example:</p> <pre><code>-- Get the raw metatable of a table\nlocal myTable = { a = 1, b = 2 }\nlocal metatable = getrawmetatable(myTable)\n\nprint(metatable)\n</code></pre>"},{"location":"examples/getreg_example/","title":"getreg","text":"<p>Description:</p> <p>This function demonstrates the usage of the getreg API.</p> <p>Example:</p> <pre><code>-- Get the registry table\nlocal registry = getreg()\n\nprint(registry)\n</code></pre>"},{"location":"examples/getregistry_example/","title":"getregistry","text":"<p>Description:</p> <p>This function demonstrates the usage of the getregistry API.</p> <p>Example:</p> <pre><code>-- Get the registry table\nlocal registry = getregistry()\n\nprint(registry)\n</code></pre>"},{"location":"examples/getrenderproperty_example/","title":"getrenderproperty","text":"<p>Description:</p> <p>This function demonstrates the usage of the getrenderproperty API.</p> <p>Example:</p> <pre><code>-- Get a render property of an object\nlocal property = getrenderproperty(some_object, 'RenderProperty')\n\nprint(\"Render property value:\", property)\n</code></pre>"},{"location":"examples/getrenv_example/","title":"getrenv","text":"<p>Description:</p> <p>This function demonstrates the usage of the getrenv API.</p> <p>Example:</p> <pre><code>-- Get the Roblox environment\nlocal environment = getrenv()\n\nprint(environment)\n</code></pre>"},{"location":"examples/getrunningscripts_example/","title":"getrunningscripts","text":"<p>Description:</p> <p>This function demonstrates the usage of the getrunningscripts API.</p> <p>Example:</p> <pre><code>-- Get all running scripts\nlocal running_scripts = getrunningscripts()\n\nfor _, script in ipairs(running_scripts) do\n    print(script)\nend\n</code></pre>"},{"location":"examples/getscriptbytecode_example/","title":"getscriptbytecode","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscriptbytecode API.</p> <p>Example:</p> <pre><code>-- Get the bytecode of a script\nlocal bytecode = getscriptbytecode(some_script)\n\nprint(\"Script bytecode: \" .. tostring(bytecode))\n</code></pre>"},{"location":"examples/getscriptclosure_example/","title":"getscriptclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscriptclosure API.</p> <p>Example:</p> <pre><code>-- Get the closure of a script\nlocal scriptClosure = getscriptclosure(some_script)\n\nprint(\"Script closure: \" .. tostring(scriptClosure))\n</code></pre>"},{"location":"examples/getscriptfromthread_example/","title":"getscriptfromthread","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscriptfromthread API.</p> <p>Example:</p> <pre><code>-- Get the script associated with a thread\nlocal script = getscriptfromthread(some_thread)\n\nprint(\"Script from thread:\", script)\n</code></pre>"},{"location":"examples/getscriptfunction_example/","title":"getscriptfunction","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscriptfunction API.</p> <p>Example:</p> <pre><code>-- Get the function of a script\nlocal scriptFunction = getscriptfunction(some_script)\n\nprint(\"Script function: \" .. tostring(scriptFunction))\n</code></pre>"},{"location":"examples/getscripthash_example/","title":"getscripthash","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscripthash API.</p> <p>Example:</p> <pre><code>-- Get the hash of a script\nlocal hash = getscripthash(some_script)\n\nprint(\"Script hash:\", hash)\n</code></pre>"},{"location":"examples/getscripts_example/","title":"getscripts","text":"<p>Description:</p> <p>This function demonstrates the usage of the getscripts API.</p> <p>Example:</p> <pre><code>-- Get all scripts\nlocal scripts = getscripts()\n\nfor _, script in ipairs(scripts) do\n    print(script:GetFullName())\nend\n</code></pre>"},{"location":"examples/getsenv_example/","title":"getsenv","text":"<p>Description:</p> <p>This function demonstrates the usage of the getsenv API.</p> <p>Example:</p> <pre><code>-- Get the environment of a script\nlocal env = getsenv(some_script)\n\nprint(\"Script environment:\", env)\n</code></pre>"},{"location":"examples/getstack_example/","title":"getstack","text":"<p>Description:</p> <p>This function demonstrates the usage of the getstack API.</p> <p>Example:</p> <pre><code>-- Get the stack of a thread\nlocal stack = getstack(some_thread)\n\nprint(\"Thread stack: \" .. tostring(stack))\n</code></pre>"},{"location":"examples/gettenv_example/","title":"gettenv","text":"<p>Description:</p> <p>This function demonstrates the usage of the gettenv API.</p> <p>Example:</p> <pre><code>-- Get the environment of a script\nlocal tenv = gettenv(some_script)\n\nprint(tenv)\n</code></pre>"},{"location":"examples/getthreadcontext_example/","title":"getthreadcontext","text":"<p>Description:</p> <p>This function demonstrates the usage of the getthreadcontext API.</p> <p>Example:</p> <pre><code>-- Get the thread context\nlocal context = getthreadcontext()\n\nprint(\"Current thread context: \" .. context)\n</code></pre>"},{"location":"examples/getthreadidentity_example/","title":"getthreadidentity","text":"<p>Description:</p> <p>This function demonstrates the usage of the getthreadidentity API.</p> <p>Example:</p> <pre><code>-- Get the thread identity\nlocal identity = getthreadidentity()\n\nprint(\"Thread identity:\", identity)\n</code></pre>"},{"location":"examples/getupvalue_example/","title":"getupvalue","text":"<p>Description:</p> <p>This function demonstrates the usage of the getupvalue API.</p> <p>Example:</p> <pre><code>-- Get an upvalue from a function\nlocal upvalue = getupvalue(some_function, 2)\n\nprint(upvalue)\n</code></pre>"},{"location":"examples/getupvalues_example/","title":"getupvalues","text":"<p>Description:</p> <p>This function demonstrates the usage of the getupvalues API.</p> <p>Example:</p> <pre><code>-- Get all upvalues of a function\nlocal upvalues = getupvalues(some_function)\n\nfor i, value in ipairs(upvalues) do\n    print(\"Upvalue \" .. i .. \":\", value)\nend\n</code></pre>"},{"location":"examples/hookfunc_example/","title":"hookfunc","text":"<p>Description:</p> <p>This function demonstrates the usage of the hookfunc API.</p> <p>Example:</p> <pre><code>-- Hook a function\nhookfunc(target_function, function()\n    print(\"Hooked function called!\")\nend)\n</code></pre>"},{"location":"examples/hookfunction_example/","title":"hookfunction","text":"<p>Description:</p> <p>This function demonstrates the usage of the hookfunction API.</p> <p>Example:</p> <pre><code>-- Hook a function\nhookfunction(target_function, function()\n    print(\"Hooked function called!\")\nend)\n</code></pre>"},{"location":"examples/hookmeta_example/","title":"hookmeta","text":"<p>Description:</p> <p>This function demonstrates the usage of the hookmeta API.</p> <p>Example:</p> <pre><code>-- Hook the metatable of an object\nhookmeta(some_object, \"__newindex\", function(tbl, key, value)\n    print(\"Setting key: \" .. key .. \" to value: \" .. tostring(value))\nend)\n</code></pre>"},{"location":"examples/hookmetamethod_example/","title":"hookmetamethod","text":"<p>Description:</p> <p>This function demonstrates the usage of the hookmetamethod API.</p> <p>Example:</p> <pre><code>-- Hook a metamethod\nlocal target = {}\n\nsetmetatable(target, {\n    __index = function(t, key)\n        return \"Original value\"\n    end\n})\n\nlocal original_method = hookmetamethod(target, \"__index\", function(tbl, key)\n    print(\"Hooked __index called for key: \" .. key)\n    return original_method(tbl, key)\nend)\n\nprint(target.someKey)\n</code></pre>"},{"location":"examples/http_example/","title":"http","text":"<p>Description:</p> <p>This function demonstrates the usage of the http API.</p> <p>Example:</p> <pre><code>-- Make an HTTP GET request\nlocal response = http.get(\"https://example.com\")\n\nif response then\n    print(\"Response received: \" .. response)\nelse\n    print(\"Failed to fetch the response\")\nend\n</code></pre>"},{"location":"examples/http_request_example/","title":"http_request","text":"<p>Description:</p> <p>This function demonstrates the usage of the http_request API.</p> <p>Example:</p> <pre><code>-- Make an HTTP request\nlocal response = http_request({ Url = \"https://api.example.com\", Method = \"POST\" })\n\nprint(response)\n</code></pre>"},{"location":"examples/identifyexecutor_example/","title":"identifyexecutor","text":"<p>Description:</p> <p>This function demonstrates the usage of the identifyexecutor API.</p> <p>Example:</p> <pre><code>-- Identify the executor\nlocal executor = identifyexecutor()\n\nprint(\"Executor: \" .. executor)\n</code></pre>"},{"location":"examples/is_seliware_closure_example/","title":"is_seliware_closure","text":"<p>Description:</p> <p>This function demonstrates the usage of the is_seliware_closure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a Seliware closure\nlocal result = is_seliware_closure(some_function)\n\nif result then\n    print(\"The function is a Seliware closure\")\nelse\n    print(\"The function is not a Seliware closure\")\nend\n</code></pre>"},{"location":"examples/is_seliwareclosure_example/","title":"is_seliwareclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the is_seliwareclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a Seliware closure (alternative)\nlocal is_seliware = is_seliwareclosure(some_function)\n\nprint(\"Is Seliware closure: \" .. tostring(is_seliware))\n</code></pre>"},{"location":"examples/iscclosure_example/","title":"iscclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the iscclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a C closure\nlocal result = iscclosure(some_function)\n\nif result then\n    print(\"The function is a C closure\")\nelse\n    print(\"The function is not a C closure\")\nend\n</code></pre>"},{"location":"examples/isexecutorclosure_example/","title":"isexecutorclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the isexecutorclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is an executor closure\nlocal is_executor = isexecutorclosure(some_function)\n\nprint(\"Is executor closure: \" .. tostring(is_executor))\n</code></pre>"},{"location":"examples/isfile_example/","title":"isfile","text":"<p>Description:</p> <p>This function demonstrates the usage of the isfile API.</p> <p>Example:</p> <pre><code>-- Check if a file exists\nlocal exists = isfile(\"somefile.txt\")\n\nif exists then\n    print(\"File exists\")\nelse\n    print(\"File does not exist\")\nend\n</code></pre>"},{"location":"examples/isfolder_example/","title":"isfolder","text":"<p>Description:</p> <p>This function demonstrates the usage of the isfolder API.</p> <p>Example:</p> <pre><code>-- Check if a folder exists\nlocal exists = isfolder(\"somefolder\")\n\nif exists then\n    print(\"Folder exists\")\nelse\n    print(\"Folder does not exist\")\nend\n</code></pre>"},{"location":"examples/isfunctionhooked_example/","title":"isfunctionhooked","text":"<p>Description:</p> <p>This function demonstrates the usage of the isfunctionhooked API.</p> <p>Example:</p> <pre><code>-- Check if a function is hooked\nlocal hooked = isfunctionhooked(some_function)\n\nif hooked then\n    print(\"Function is hooked\")\nelse\n    print(\"Function is not hooked\")\nend\n</code></pre>"},{"location":"examples/isgameactive_example/","title":"isgameactive","text":"<p>Description:</p> <p>This function demonstrates the usage of the isgameactive API.</p> <p>Example:</p> <pre><code>-- Check if the game is active\nlocal active = isgameactive()\n\nif active then\n    print(\"Game is active\")\nelse\n    print(\"Game is not active\")\nend\n</code></pre>"},{"location":"examples/iskeydown_example/","title":"IsKeyDown","text":"<p>Description:</p> <p>This function demonstrates the usage of the IsKeyDown API.</p> <p>Example:</p> <pre><code>-- Check if a key is down\nlocal is_down = IsKeyDown('Z')\n\nif is_down then\n    print(\"Key Z is down\")\nelse\n    print(\"Key Z is not down\")\nend\n</code></pre>"},{"location":"examples/islclosure_example/","title":"islclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the islclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a Lua closure\nlocal is_lua_closure = islclosure(some_function)\n\nprint(\"Is Lua closure: \" .. tostring(is_lua_closure))\n</code></pre>"},{"location":"examples/isourclosure_example/","title":"isourclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the isourclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is our closure\nlocal is_ours = isourclosure(some_function)\n\nprint(\"Is our closure: \" .. tostring(is_ours))\n</code></pre>"},{"location":"examples/isrbxactive_example/","title":"isrbxactive","text":"<p>Description:</p> <p>This function demonstrates the usage of the isrbxactive API.</p> <p>Example:</p> <pre><code>-- Check if Roblox is active\nlocal active = isrbxactive()\n\nif active then\n    print(\"Roblox is active\")\nelse\n    print(\"Roblox is not active\")\nend\n</code></pre>"},{"location":"examples/isreadonly_example/","title":"isreadonly","text":"<p>Description:</p> <p>This function demonstrates the usage of the isreadonly API.</p> <p>Example:</p> <pre><code>-- Check if a table is read-only\nlocal read_only = isreadonly(some_table)\n\nprint(\"Is read-only: \" .. tostring(read_only))\n</code></pre>"},{"location":"examples/isrenderobj_example/","title":"isrenderobj","text":"<p>Description:</p> <p>This function demonstrates the usage of the isrenderobj API.</p> <p>Example:</p> <pre><code>-- Check if an object is a render object\nlocal is_render = isrenderobj(some_object)\n\nif is_render then\n    print(\"The object is a render object\")\nelse\n    print(\"The object is not a render object\")\nend\n</code></pre>"},{"location":"examples/isscriptable_example/","title":"isscriptable","text":"<p>Description:</p> <p>This function demonstrates the usage of the isscriptable API.</p> <p>Example:</p> <pre><code>-- Check if an object is scriptable\nlocal myObject = Instance.new(\"Part\")\nlocal is_scriptable = isscriptable(myObject)\n\nif is_scriptable then\n    print(\"Object is scriptable\")\nelse\n    print(\"Object is not scriptable\")\nend\n</code></pre>"},{"location":"examples/isseliware_closure_example/","title":"isseliware_closure","text":"<p>Description:</p> <p>This function demonstrates the usage of the isseliware_closure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a Seliware closure\nlocal result = isseliware_closure(some_function)\n\nif result then\n    print(\"The function is a Seliware closure\")\nelse\n    print(\"The function is not a Seliware closure\")\nend\n</code></pre>"},{"location":"examples/isseliwareclosure_example/","title":"isseliwareclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the isseliwareclosure API.</p> <p>Example:</p> <pre><code>-- Check if a function is a Seliware closure\nlocal is_seliware = isseliwareclosure(some_function)\n\nprint(\"Is Seliware closure: \" .. tostring(is_seliware))\n</code></pre>"},{"location":"examples/iswindowactive_example/","title":"iswindowactive","text":"<p>Description:</p> <p>This function demonstrates the usage of the iswindowactive API.</p> <p>Example:</p> <pre><code>-- Check if the window is active\nlocal active = iswindowactive()\n\nprint(\"Is window active: \" .. tostring(active))\n</code></pre>"},{"location":"examples/keypress_example/","title":"KeyPress","text":"<p>Description:</p> <p>This function demonstrates the usage of the KeyPress API.</p> <p>Example:</p> <pre><code>-- Press a key\nKeyPress('Y')\n\nprint(\"Pressed key: Y\")\n</code></pre>"},{"location":"examples/listfiles_example/","title":"listfiles","text":"<p>Description:</p> <p>This function demonstrates the usage of the listfiles API.</p> <p>Example:</p> <pre><code>-- List all files in a folder\nlocal files = listfiles('folderpath')\n\nfor _, file in ipairs(files) do\n    print(file)\nend\n</code></pre>"},{"location":"examples/loadbytecode_example/","title":"loadbytecode","text":"<p>Description:</p> <p>This function demonstrates the usage of the loadbytecode API.</p> <p>Example:</p> <pre><code>-- Load bytecode\nlocal bytecode_string = \"...\"\nlocal loaded_function = loadbytecode(bytecode_string)\n\nloaded_function()\n</code></pre>"},{"location":"examples/loadfile_example/","title":"loadfile","text":"<p>Description:</p> <p>This function demonstrates the usage of the loadfile API.</p> <p>Example:</p> <pre><code>-- Load a Lua script from a file\nlocal chunk = loadfile('somefile.lua')\n\nif chunk then\n    chunk()\nelse\n    print(\"Failed to load file\")\nend\n</code></pre>"},{"location":"examples/loadstring_example/","title":"loadstring","text":"<p>Description:</p> <p>This function demonstrates the usage of the loadstring API.</p> <p>Example:</p> <pre><code>-- Load and execute a string as Lua code\nlocal func = loadstring('print(\"Hello World\")')\n\nfunc()\n</code></pre>"},{"location":"examples/lz4compress_example/","title":"lz4compress","text":"<p>Description:</p> <p>This function demonstrates the usage of the lz4compress API.</p> <p>Example:</p> <pre><code>-- Compress data using LZ4\nlocal data = \"Some data to compress\"\nlocal compressed = lz4compress(data)\n\nprint(\"Compressed data: \" .. compressed)\n</code></pre>"},{"location":"examples/lz4decompress_example/","title":"lz4decompress","text":"<p>Description:</p> <p>This function demonstrates the usage of the lz4decompress API.</p> <p>Example:</p> <pre><code>-- Decompress data using lz4\nlocal compressed_data = \"...\"\nlocal decompressed_data = lz4decompress(compressed_data)\n\nprint(\"Decompressed data: \" .. decompressed_data)\n</code></pre>"},{"location":"examples/make_readonly_example/","title":"make_readonly","text":"<p>Description:</p> <p>This function demonstrates the usage of the make_readonly API.</p> <p>Example:</p> <pre><code>-- Make an object read-only\nlocal myObject = Instance.new(\"Part\")\n\nmake_readonly(myObject)\n</code></pre>"},{"location":"examples/make_writable_example/","title":"make_writable","text":"<p>Description:</p> <p>This function demonstrates the usage of the make_writable API.</p> <p>Example:</p> <pre><code>-- Make an object writable\nlocal myObject = Instance.new(\"Part\")\n\nmake_writable(myObject)\n\nprint(\"Object is now writable\")\n</code></pre>"},{"location":"examples/makefolder_example/","title":"makefolder","text":"<p>Description:</p> <p>This function demonstrates the usage of the makefolder API.</p> <p>Example:</p> <pre><code>-- Make a new folder\nlocal success = makefolder(\"NewFolderPath\")\n\nif success then\n    print(\"Folder created successfully!\")\nelse\n    print(\"Failed to create folder.\")\nend\n</code></pre>"},{"location":"examples/messagebox_example/","title":"messagebox","text":"<p>Description:</p> <p>This function demonstrates the usage of the messagebox API.</p> <p>Example:</p> <pre><code>-- Display a message box\nmessagebox(\"This is a message\", \"Title\", 0)\n</code></pre>"},{"location":"examples/mouse1click_example/","title":"Mouse1Click","text":"<p>Description:</p> <p>This function demonstrates the usage of the Mouse1Click API.</p> <p>Example:</p> <pre><code>-- Simulate a left mouse button click\nMouse1Click()\n\nprint(\"Left mouse button clicked\")\n</code></pre>"},{"location":"examples/mouse2click_example/","title":"Mouse2Click","text":"<p>Description:</p> <p>This function demonstrates the usage of the Mouse2Click API.</p> <p>Example:</p> <pre><code>-- Simulate a right mouse button click\nMouse2Click()\n\nprint(\"Right mouse button clicked\")\n</code></pre>"},{"location":"examples/mousescroll_example/","title":"MouseScroll","text":"<p>Description:</p> <p>This function demonstrates the usage of the MouseScroll API.</p> <p>Example:</p> <pre><code>-- Scroll the mouse wheel\nMouseScroll(2)\n\nprint(\"Mouse wheel scrolled\")\n</code></pre>"},{"location":"examples/newcclosure_example/","title":"newcclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the newcclosure API.</p> <p>Example:</p> <pre><code>-- Create a new C closure\nlocal closure = newcclosure(function()\n    print(\"This is a C closure\")\nend)\n\nclosure()\n</code></pre>"},{"location":"examples/newlclosure_example/","title":"newlclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the newlclosure API.</p> <p>Example:</p> <pre><code>-- Create a new Lua closure\nlocal closure = newlclosure(function()\n    print(\"Local closure executed\")\nend)\n\nclosure()\n</code></pre>"},{"location":"examples/pushinstance_userdata_example/","title":"pushinstance_userdata","text":"<p>Description:</p> <p>This function demonstrates the usage of the pushinstance_userdata API.</p> <p>Example:</p> <pre><code>-- Push an instance to userdata\npushinstance_userdata(some_instance)\n\nprint(\"Instance pushed to userdata\")\n</code></pre>"},{"location":"examples/queue_on_teleport_example/","title":"queue_on_teleport","text":"<p>Description:</p> <p>This function demonstrates the usage of the queue_on_teleport API.</p> <p>Example:</p> <pre><code>-- Queue a function to be executed on teleport\nqueue_on_teleport('print(\"Player has teleported\")')\n</code></pre>"},{"location":"examples/queueonteleport_example/","title":"queueonteleport","text":"<p>Description:</p> <p>This function demonstrates the usage of the queueonteleport API.</p> <p>Example:</p> <pre><code>-- Queue a function to run on teleport\nqueueonteleport('print(\"Teleporting\")')\n\nprint(\"Function queued for teleport\")\n</code></pre>"},{"location":"examples/readfile_example/","title":"readfile","text":"<p>Description:</p> <p>This function demonstrates the usage of the readfile API.</p> <p>Example:</p> <pre><code>-- Read data from a file\nlocal content = readfile('somefile.txt')\n\nprint(\"File content:\", content)\n</code></pre>"},{"location":"examples/replaceclosure_example/","title":"replaceclosure","text":"<p>Description:</p> <p>This function demonstrates the usage of the replaceclosure API.</p> <p>Example:</p> <pre><code>-- Replace a function closure\nreplaceclosure(old_function, new_function)\n\nprint(\"Closure replaced\")\n</code></pre>"},{"location":"examples/request_example/","title":"request","text":"<p>Description:</p> <p>This function demonstrates the usage of the request API.</p> <p>Example:</p> <pre><code>-- Make a web request\nlocal response = request({ Url = \"https://example.com\", Method = \"GET\" })\n\nif response.Success then\n    print(\"Response: \" .. response.Body)\nelse\n    print(\"Request failed\")\nend\n</code></pre>"},{"location":"examples/require_example/","title":"require","text":"<p>Description:</p> <p>This function demonstrates the usage of the require API.</p> <p>Example:</p> <pre><code>-- Require a module\nlocal module = require(module_id)\n\nprint(\"Module required successfully\")\n</code></pre>"},{"location":"examples/run_on_actor_example/","title":"run_on_actor","text":"<p>Description:</p> <p>This function demonstrates the usage of the run_on_actor API.</p> <p>Example:</p> <pre><code>-- Run a function on an actor\nrun_on_actor(actor, function()\n    print(\"Function running on actor\")\nend)\n</code></pre>"},{"location":"examples/saveinstance_example/","title":"saveinstance","text":"<p>Description:</p> <p>This function demonstrates the usage of the saveinstance API.</p> <p>Example:</p> <pre><code>-- Save an instance to a file\nsaveinstance('saved_instance.rbxm')\n\nprint(\"Instance saved successfully\")\n</code></pre>"},{"location":"examples/set_fps_cap_example/","title":"set_fps_cap","text":"<p>Description:</p> <p>This function demonstrates the usage of the set_fps_cap API.</p> <p>Example:</p> <pre><code>-- Set the FPS cap (alternative)\nset_fps_cap(240)\n\nprint(\"FPS cap set to 240\")\n</code></pre>"},{"location":"examples/set_thread_identity_example/","title":"set_thread_identity","text":"<p>Description:</p> <p>This function demonstrates the usage of the set_thread_identity API.</p> <p>Example:</p> <pre><code>-- Set the thread identity (alternative)\nset_thread_identity(3)\n\nprint(\"Thread identity set to 3\")\n</code></pre>"},{"location":"examples/setclipboard_example/","title":"setclipboard","text":"<p>Description:</p> <p>This function demonstrates the usage of the setclipboard API.</p> <p>Example:</p> <pre><code>-- Set text to the clipboard\nsetclipboard('Copy this text!')\n\nprint(\"Text copied to clipboard\")\n</code></pre>"},{"location":"examples/setconstant_example/","title":"setconstant","text":"<p>Description:</p> <p>This function demonstrates the usage of the setconstant API.</p> <p>Example:</p> <pre><code>-- Set a constant in a function\nsetconstant(some_function, 1, new_value)\n\nprint(\"Constant set successfully\")\n</code></pre>"},{"location":"examples/setfps_example/","title":"setfps","text":"<p>Description:</p> <p>This function demonstrates the usage of the setfps API.</p> <p>Example:</p> <pre><code>-- Set the frame rate\nsetfps(60)\n\nprint(\"FPS set to 60\")\n</code></pre>"},{"location":"examples/setfpscap_example/","title":"setfpscap","text":"<p>Description:</p> <p>This function demonstrates the usage of the setfpscap API.</p> <p>Example:</p> <pre><code>-- Set the FPS cap\nsetfpscap(144)\n\nprint(\"FPS cap set to 144\")\n</code></pre>"},{"location":"examples/sethiddenproperty_example/","title":"sethiddenproperty","text":"<p>Description:</p> <p>This function demonstrates the usage of the sethiddenproperty API.</p> <p>Example:</p> <pre><code>-- Set a hidden property of an object\nsethiddenproperty(some_object, 'HiddenPropertyName', new_value)\n\nprint(\"Hidden property set successfully\")\n</code></pre>"},{"location":"examples/setidentity_example/","title":"setidentity","text":"<p>Description:</p> <p>This function demonstrates the usage of the setidentity API.</p> <p>Example:</p> <pre><code>-- Set the identity of the script\nsetidentity(3)\n\nprint(\"Identity set to level 3\")\n</code></pre>"},{"location":"examples/setnamecallmethod_example/","title":"setnamecallmethod","text":"<p>Description:</p> <p>This function demonstrates the usage of the setnamecallmethod API.</p> <p>Example:</p> <pre><code>-- Set the namecall method\nsetnamecallmethod('FireServer')\n\nprint(\"Namecall method set\")\n</code></pre>"},{"location":"examples/setrawmetatable_example/","title":"setrawmetatable","text":"<p>Description:</p> <p>This function demonstrates the usage of the setrawmetatable API.</p> <p>Example:</p> <pre><code>-- Set raw metatable for a table\nlocal myTable = {}\nlocal newMetatable = {\n    __index = function(tbl, key)\n        return \"Value not found\"\n    end\n}\n\nsetrawmetatable(myTable, newMetatable)\n\nprint(myTable.someKey)  -- Should print: Value not found\n</code></pre>"},{"location":"examples/setrbxclipboard_example/","title":"setrbxclipboard","text":"<p>Description:</p> <p>This function demonstrates the usage of the setrbxclipboard API.</p> <p>Example:</p> <pre><code>-- Set text to Roblox's clipboard\nlocal success = setrbxclipboard(\"Some Roblox data\")\n\nif success then\n    print(\"Successfully copied to Roblox clipboard\")\nelse\n    print(\"Failed to copy to Roblox clipboard\")\nend\n</code></pre>"},{"location":"examples/setreadonly_example/","title":"setreadonly","text":"<p>Description:</p> <p>This function demonstrates the usage of the setreadonly API.</p> <p>Example:</p> <pre><code>-- Set a table to be read-only\nsetreadonly(some_table, true)\n\nprint(\"Table set to read-only\")\n</code></pre>"},{"location":"examples/setrenderproperty_example/","title":"setrenderproperty","text":"<p>Description:</p> <p>This function demonstrates the usage of the setrenderproperty API.</p> <p>Example:</p> <pre><code>-- Set a render property of an object\nsetrenderproperty(some_object, 'RenderProperty', new_value)\n\nprint(\"Render property set successfully\")\n</code></pre>"},{"location":"examples/setscriptable_example/","title":"setscriptable","text":"<p>Description:</p> <p>This function demonstrates the usage of the setscriptable API.</p> <p>Example:</p> <pre><code>-- Set an object to be scriptable\nlocal some_object = Instance.new(\"Part\")\n\nsetscriptable(some_object, true)\n\nprint(\"Object is now scriptable\")\n</code></pre>"},{"location":"examples/setstack_example/","title":"setstack","text":"<p>Description:</p> <p>This function demonstrates the usage of the setstack API.</p> <p>Example:</p> <pre><code>-- Set the stack of a thread\nsetstack(some_thread, new_stack)\n\nprint(\"Stack set successfully\")\n</code></pre>"},{"location":"examples/setthreadcontext_example/","title":"setthreadcontext","text":"<p>Description:</p> <p>This function demonstrates the usage of the setthreadcontext API.</p> <p>Example:</p> <pre><code>-- Set the thread context\nsetthreadcontext(2)\n\nprint(\"Thread context set to 2\")\n</code></pre>"},{"location":"examples/setthreadidentity_example/","title":"setthreadidentity","text":"<p>Description:</p> <p>This function demonstrates the usage of the setthreadidentity API.</p> <p>Example:</p> <pre><code>-- Set the thread identity\nsetthreadidentity(4)\n\nprint(\"Thread identity set to 4\")\n</code></pre>"},{"location":"examples/setupvalue_example/","title":"setupvalue","text":"<p>Description:</p> <p>This function demonstrates the usage of the setupvalue API.</p> <p>Example:</p> <pre><code>-- Set an upvalue in a function\nsetupvalue(some_function, 2, new_value)\n\nprint(\"Upvalue set successfully\")\n</code></pre>"},{"location":"examples/shared_example/","title":"shared","text":"<p>Description:</p> <p>This function demonstrates the usage of the shared API.</p> <p>Example:</p> <pre><code>-- Use shared table\nshared.SomeSharedValue = \"Hello, shared world!\"\n\nprint(shared.SomeSharedValue)\n</code></pre>"},{"location":"examples/toclipboard_example/","title":"toclipboard","text":"<p>Description:</p> <p>This function demonstrates the usage of the toclipboard API.</p> <p>Example:</p> <pre><code>-- Copy text to clipboard\ntoclipboard(\"This text is copied to the clipboard!\")\n</code></pre>"},{"location":"examples/write_clipboard_example/","title":"write_clipboard","text":"<p>Description:</p> <p>This function demonstrates the usage of the write_clipboard API.</p> <p>Example:</p> <pre><code>-- Write text to the clipboard\nwrite_clipboard(\"Text to write to clipboard\")\n\nprint(\"Text written to clipboard\")\n</code></pre>"},{"location":"examples/writefile_example/","title":"writefile","text":"<p>Description:</p> <p>This function demonstrates the usage of the writefile API.</p> <p>Example:</p> <pre><code>-- Write data to a file\nwritefile('somefile.txt', 'Hello, world!')\n\nprint(\"Data written to file\")\n</code></pre>"}]}